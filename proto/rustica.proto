syntax = "proto3";
package rustica;

message ChallengeRequest {
    string pubkey = 1;
}

message ChallengeResponse {
    string time = 1;
    string challenge = 2;
    // We have to use the inverse of what we would normally because the default
    // value for a bool in Tonic is false. If we don't do this, it won't be
    // backwards compatible (a new client will see the lack of this field
    // as not requiring a signature).
    bool no_signature_required = 3;
}

message Challenge {
    string pubkey = 1;
    string challenge = 2;
    string challenge_signature = 3;
    string challenge_time = 4;
}

message CertificateRequest {
    uint32 cert_type = 1;
    string key_id = 2;
    repeated string principals = 3;
    repeated string servers = 4;
    map<string, string> extensions = 5;
    map<string, string> critical_options = 6;
    uint64 valid_after = 7;
    uint64 valid_before = 8;
    Challenge challenge = 9;
}

message CertificateResponse {
    string certificate = 1;
    string error = 2;
    int64 error_code = 3;
    string mtls_refresh = 4;
}

message RegisterKeyRequest {
    bytes certificate = 1;
    bytes intermediate = 2;
    Challenge challenge = 3;
}

message RegisterKeyResponse {}

message RegisterU2FKeyRequest {
    bytes auth_data = 1;
    bytes auth_data_signature = 2;
    bytes sk_application = 3;
    bytes u2f_challenge = 4;
    bytes intermediate = 5;
    int32 alg = 6;
    Challenge challenge = 7;
}

message RegisterU2FKeyResponse {}

message X509CertificateRequest {
    // Which signing configuration are they requesting an X509 certificate from
    // to support the new multi-environment system
    string key_id = 1;
    // The CSR proves possession of the private key as well as requesting other
    // elements of the final certificate 
    bytes csr = 2;
    // The attestation is a certificate generated from the F9 slot signed by the
    // F9 slot
    bytes attestation = 3;
    // The certificate from the F9 slot, signed by the trusted root authority
    // Generally this will be the Yubico Root CA.
    bytes attestation_intermediate = 4;
}

message X509CertificateResponse {
    bytes certificate = 1;
    string error = 2;
    int64 error_code = 3;
}

service Rustica {
    rpc Challenge(ChallengeRequest) returns (ChallengeResponse);
    rpc Certificate(CertificateRequest) returns (CertificateResponse);
    rpc RegisterKey(RegisterKeyRequest) returns (RegisterKeyResponse);
    rpc RegisterU2FKey(RegisterU2FKeyRequest) returns (RegisterU2FKeyResponse);
    rpc X509Certificate(X509CertificateRequest) returns (X509CertificateResponse);
}