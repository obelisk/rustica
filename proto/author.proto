syntax = "proto3";
package author;

// Identities are pieces of data that Author can use to determine
// who is asking for authorization when it is happening through
// a proxy service. For example, when someone requests access through
// the editor `Rustica`, identities the following from the requesting client
// are sent through the `AuthorizeRequest` call:
//  Source IP
//  mTLS Identity data
//  SSH key fingerprint

// Important To Note
// The `identities` is not checked for correctness (though it may have other
// heurisitics applied to it). It should only contain data that has been
// verified by the editor.

message AuthorizeRequest {
    map<string, string> identities = 1;
    map<string, string> authorization_request = 2;
}

message AuthorizeResponse {
    map<string, string> approval_response = 1;
}

// This call adds data into Author for use in further authorization requests.
// For example, when a user adds a new key via the editor `Rustica`, it feeds
// into this.
message AddIdentityDataRequest {
    map<string, string> identities = 1;
    map<string, string> identity_data = 2;
}

message AddIdentityDataResponse {}

message AuthorizedSignerKey {
    string identity = 1;
    string pubkey = 2;
}

// This call fetches a list of all authorized signers and their signing pubkeys
message AuthorizedSignerKeysRequest {}

message AuthorizedSignerKeysResponse {
    repeated AuthorizedSignerKey signer_keys = 1;
}

service Author {
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);
    rpc AddIdentityData(AddIdentityDataRequest) returns (AddIdentityDataResponse);
    rpc GetAllSignerKeys(AuthorizedSignerKeysRequest) returns (AuthorizedSignerKeysResponse);
}
