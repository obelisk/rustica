# This is the listen address that will be used for the Rustica service
listen_address = "0.0.0.0:50052"

# This setting controls if the agent has to prove that it
# controls the private key to Rustica. Setting this to true means a user needs
# to generate two signatures (one to Rustica, and one to the host). The
# advantage of using this, is a compromised host cannot get certificates
# from the server without physical interaction.
#
# A client will always need to sign the challenge from the host they
# are attempting to connect to however so a physical tap will always
# be required.
require_rustica_proof = false

# This setting controls if Rustica will allow users to register keys that
# cannot have their providence validated. If set to true, if a registration
# either does not provide an attestation or the attestation fails, the key
# will be rejected and the API call will fail. In the case of using an
# external authorizer, a call will not be made to inform it of this event.
require_attestation_chain = true


# The certificate presented to connecting clients
server_cert = '''
-----BEGIN CERTIFICATE-----
MIIBqjCCAVCgAwIBAgIJAOI2FtcQeixVMAoGCCqGSM49BAMCMBsxGTAXBgNVBAMM
EEVudGVycHJpc2VSb290Q0EwHhcNMjIwMTIwMDQwMjA2WhcNMjQwNDI0MDQwMjA2
WjAxMRAwDgYDVQQDDAdydXN0aWNhMRAwDgYDVQQKDAdSdXN0aWNhMQswCQYDVQQG
EwJDQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABAINhoFW/5twPqAHLxjFjmns
lE1jJMJQXmijymZTJxR0DsNZlwvUgNH+WYQFfq4IVMwypVHgyTYJO+lAAPEeyPOj
ZzBlMDUGA1UdIwQuMCyhH6QdMBsxGTAXBgNVBAMMEEVudGVycHJpc2VSb290Q0GC
CQCRg096sVtP0zAJBgNVHRMEAjAAMAsGA1UdDwQEAwIE8DAUBgNVHREEDTALggls
b2NhbGhvc3QwCgYIKoZIzj0EAwIDSAAwRQIhAMfjW/PMrA9/cCg6O835sr22ZrNk
k/lFOODLqAJPbh3+AiAzeCUyrmxT5VTf6uyFoNT8zMoWSi79rudcdgl+32RqMg==
-----END CERTIFICATE-----
'''

# The key for the certificate presented to clients
server_key = '''
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgkTd0C69xWFX9PmVf
BeD0ySfG+O0e7p7SXR9xo/enbvahRANCAAQCDYaBVv+bcD6gBy8YxY5p7JRNYyTC
UF5oo8pmUycUdA7DWZcL1IDR/lmEBX6uCFTMMqVR4Mk2CTvpQADxHsjz
-----END PRIVATE KEY-----
'''

# Configuration for authenticating connecting clients as well as defining
# automatic renewal settings.
[client_authority]
# This must be one of the signing authorities defined in the signing structure
authority = "example_prod_environment"
# When we issue a new access certificate, how long is it valid for. 
validity_length = 181440000 # Three weeks * 100

# I think the easiest way to explain this is with an example.
#
# If a certificate is issued for three months, setting this to one week means
# in the week before it expires, when they request a new SSH certificate, the
# server will generate a new mTLS access certificate and send that back with
# the request.
#
# This value should always be less than the validity length
expiration_renewal_period = 181439980 #60480000 # One Week * 100

[signing]
default_authority = "example_prod_environment"

[signing.signing_configuration."example_prod_environment"]
user_slot = "R1"
host_slot = "R2"
x509_slot = "0x9a"
client_certificate_authority_slot = "R5"
client_certificate_authority_common_name = "RusticaAccess"

[logging."stdout"]

[authorization."database"]
path = "examples/example.db"